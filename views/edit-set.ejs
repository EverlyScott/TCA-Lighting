<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Edit Set | TCA Lighting System</title>
    <link rel="stylesheet" href="/css/main.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      @media (max-width: 750px) {
        .changeflexonmobile {
          flex-direction: column;
        }

        .notation {
          width: 100% !important;
          min-width: initial !important;
          height: auto !important;
          position: initial !important;
        }

        .previewContainer {
          align-items: flex-start !important;
        }

        #preview {
          height: auto !important;
          width: 250px;
          max-width: 100%;
        }
      }
    </style>
  </head>
  <body>
    <h1>Editing <span id="title-h1"><%= set.name %></span></h1>
    <div class="changeflexonmobile" style="display: flex">
      <div style="flex: 1">
        <p>Name<br /><input id="name" type="text" value="<%= set.name %>" /></p>
        <p>ID<br /><input id="id" type="text" value="<%= set.id %>" style="font-family: monospace" /></p>
        <p>Initial BPM<br /><input id="initial-bpm" type="number" min="0" value="<%= set.initialBPM %>" /></p>
      </div>
      <div
        class="previewContainer"
        style="flex: 1; flex-grow: 1; display: flex; flex-direction: column; align-items: flex-end"
      >
        <p id="previewStats" style="margin: 0">&nbsp;</p>
        <div id="preview" style="background-color: rgb(0, 0, 0); height: 100%; aspect-ratio: 1"></div>
        <button id="previewBtn">Preview</button>
      </div>
    </div>

    <div class="changeflexonmobile" style="display: flex; background-color: rgba(0, 0, 0, 0.2)">
      <div id="programItems" style="flex-grow: 1">
        <% for (let i = 0; i < set.program.length; i++) { %>
        <div class="programItem" style="border: 2px solid #000000; display: flex">
          <p>
            Note length<br /><input
              data-index="<%- i %>"
              id="length"
              type="number"
              min="0"
              value="<%- set.program[i].length %>"
            />
          </p>
          <p>
            <input data-index="<%= i %>" id="color" type="color" value="<%= "#" +
            set.program[i].rgb[0].toString(16).padStart(2, "0") + set.program[i].rgb[1].toString(16).padStart(2, "0") +
            set.program[i].rgb[2].toString(16).padStart(2, "0") %>" />
          </p>
        </div>
        <% } %>
      </div>
      <div class="notation" style="width: 50%; min-width: 500px; display: flex; flex-direction: column-reverse">
        <img id="notation" width="100%" style="position: sticky; bottom: 0" />
      </div>
    </div>
    <p id="form-error" style="display: none"></p>
    <button id="cancel">Cancel</button>
    <button id="submit">Edit</button>
  </body>

  <script>
    const set = JSON.parse(`<%- JSON.stringify(set) %>`);

    const initialId = set.id;

    const getNotationImage = () => {
      document.getElementById("notation").src = `/api/generate-notation?set=${encodeURIComponent(JSON.stringify(set))}`;
    };

    getNotationImage();

    document.getElementById("name").addEventListener("change", (evt) => {
      set.name = evt.target.value;
      document.getElementById("title-h1").innerText = evt.target.value;
      getNotationImage();
    });

    document.getElementById("id").addEventListener("change", (evt) => {
      set.id = evt.target.value;
    });

    document.getElementById("initial-bpm").addEventListener("change", (evt) => {
      set.initialBPM = evt.target.value;
      getNotationImage();
    });

    const programItems = document.getElementById("programItems").querySelectorAll(".programItem");

    for (let i = 0; i < programItems.length; i++) {
      const item = programItems[i];

      const length = item.querySelector("#length");
      const color = item.querySelector("#color");

      length.addEventListener("change", (evt) => {
        const i = parseInt(evt.target.getAttribute("data-index"));

        set.program[i].length = parseFloat(evt.target.value);
        getNotationImage();
      });

      color.addEventListener("change", (evt) => {
        const i = parseInt(evt.target.getAttribute("data-index"));

        const colorHex = evt.target.value;

        const r = Number("0x" + colorHex.substring(1, 3));
        const g = Number("0x" + colorHex.substring(3, 5));
        const b = Number("0x" + colorHex.substring(5, 7));

        set.program[i].rgb = [r, g, b];
        getNotationImage();
      });
    }

    const previewBtn = document.getElementById("previewBtn");

    previewBtn.addEventListener("click", async () => {
      const previewElem = document.getElementById("preview");
      const stats = document.getElementById("previewStats");

      let totalBeats = 0;

      for (let i = 0; i < set.program.length; i++) {
        const item = set.program[i];

        totalBeats += item.length;
      }

      let currentBeat = 0;

      for (let i = 0; i < set.program.length; i++) {
        const programItem = set.program[i];

        previewElem.style.backgroundColor = `rgb(${programItem.rgb[0]}, ${programItem.rgb[1]}, ${programItem.rgb[2]})`;

        stats.innerText = `beat ${Math.floor(currentBeat)}/${totalBeats}`;

        await sleep(programItem.length * (60 / set.initialBPM) * 1000);

        currentBeat += programItem.length;
      }

      previewElem.style.backgroundColor = "rgb(0, 0, 0)";

      stats.innerHTML = "&nbsp;";
    });

    const sleep = (ms) => {
      return new Promise((resolve) => {
        setTimeout(resolve, ms);
      });
    };

    document.getElementById("cancel").addEventListener("click", () => {
      if (confirm("Are you sure? This will delete any changes made!")) {
        location.href = "/";
      }
    });

    document.getElementById("submit").addEventListener("click", async () => {
      const res = fetch(`/api/set/${initialId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(set),
      }).then((res) => res.json());

      if (res.success) {
        location.href = "/";
      } else {
        alert(`An error occurred: ${res.error}`);
      }
    });
  </script>
</html>
